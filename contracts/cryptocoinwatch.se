# CryptoCoinWatch - Ethereum datafeed to watch the amount received of crypto currencies

data owner
data source
data min_confirmations
data last_updated

data nr_contracts
data watch_list[2^160]

data addresses[2^168](recieved_by_address, last_updated, nr_watched, last_watched)

def shared():
    MAX_ADDRESS = 2 ^ 168

def init():
    self.owner = msg.sender
    self.source = "blockchain.info"
    self.min_confirmations = 6
    self.last_updated = block.timestamp

# funid=0
def getinfo():
    return([self.owner, self.source, self.min_confirmations, self.last_updated], 4)

# funid=1
def echo(input):
    return(input)

# funid=2
def suicide():
    if msg.sender == self.owner:
        suicide(msg.sender)
    return(0)

# funid=3
def watch(address):
    if address > MAX_ADDRESS:
        return(0)

    nr_watched = self.addresses[address].nr_watched

    # check if address isn't already watched
    if nr_watched > 0:
         self.addresses[address].nr_watched = nr_watched + 1
         self.addresses[address].last_watched = block.timestamp
         return(2)

    nr_contracts = self.nr_contracts
    self.watch_list[nr_contracts] = address
    self.nr_contracts = nr_contracts + 1
    self.addresses[address].recieved_by_address = 0
    self.addresses[address].last_updated = 0
    self.addresses[address].nr_watched = 1
    self.addresses[address].last_watched = block.timestamp
    return(1)

# funid=4
def getaddress(address):
    if address > MAX_ADDRESS:
        return(0)

    return([self.addresses[address].recieved_by_address, self.addresses[address].last_updated, self.addresses[address].nr_watched, self.addresses[address].last_watched], 4)

# funid=5
def getreceivedbyaddress(address):
    if address > MAX_ADDRESS:
        return(0)

    return([self.addresses[address].recieved_by_address, self.addresses[address].last_updated], 2)

# funid=6
def setreceivedbyaddress(address, value):
    if address > MAX_ADDRESS:
        return(0)

    if msg.sender == self.owner:
        self.addresses[address].recieved_by_address = value
        self.addresses[address].last_updated = block.timestamp
        self.last_updated = block.timestamp
        return(1)
    return(0)

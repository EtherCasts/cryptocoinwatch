# BTC/ETH escrowed trade contract using CryptoCoinWatch datafeed
#
# buyer - person buying the BTC, selling ETH
# seller - person selling the BTC, buying ETH
# datafeed - address of cryptocoinwatch datafeed contract
#
# protocol:
# 1) buyer initialized trade contract
# buyer => "new", seller, datafeed, btc_address, btc_amount, expiry
# contract escrows eth_amount (callvalue)
# contract requests datafeed to watch btc_address
# 2) seller sends btc to btc_address
# 3) watchdog will notice total bitcoins received and updates value
# 4) buyer/seller triggers contract to finish
# buyer/seller => "finish"
# contract checks with datafeed:
# - amount received, send escrowed ETH to seller
# - amount not received, after expiry; sends escrowed ETH back to buyer
# - amount not received, but not expiry yet; nothing happens

shared:
    BUYER = 0x10
    SELLER = 0x11
    DATAFEED = 0x12

    BTC_ADDRESS = 0x20
    BTC_AMOUNT = 0x21
    EXPIRY = 0x22

    STATE = 0x30

# state 0 = new
# state 1 = ready
# state 2 = finished
# state 3 = expired

init:
    contract.storage[BUYER] = msg.sender
    contract.storage[STATE] = 0

code:
    cmd = msg.data[0]
    state = contract.storage[STATE]

    if state == 0 and cmd == "new" and msg.sender == contract.storage[BUYER]:
        # initialize contract
        contract.storage[SELLER] = msg.data[1]
        contract.storage[DATAFEED] = msg.data[2]

        contract.storage[BTC_ADDRESS] = msg.data[3]
        contract.storage[BTC_AMOUNT] = msg.data[4]
        contract.storage[EXPIRY] = msg.data[5]

        contract.storage[STATE] = 1

# TODO contract escrows eth_amount (callvalue)
# TODO contract requests datafeed to watch btc_address

        return(1)

    elif state == 1 and cmd == "finish" and msg.sender == contract.storage[BUYER] or msg.sender == contract.storage[SELLER]:

# TODO contract checks with datafeed:
# - amount received, send escrowed ETH to seller
# - amount not received, after expiry; sends escrowed ETH back to buyer
# - amount not received, but not expiry yet; nothing happens
#
    else:
        return(0)

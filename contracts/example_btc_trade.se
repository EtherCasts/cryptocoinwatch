# ETH/BTC escrowed trade contract using CryptoCoinWatch datafeed
#
# buyer - person buying the BTC, selling ETH
# seller - person selling the BTC, buying ETH
# datafeed - address of cryptocoinwatch datafeed contract
#
# protocol:
# 1) buyer initialized trade contract
# buyer => "new", seller, datafeed, btc_address, btc_amount, expiry
# contract escrows eth_amount (callvalue)
# contract requests datafeed to watch btc_address
# 2) seller sends btc to btc_address
# 3) watchdog will notice total bitcoins received and updates value
# 4) buyer/seller triggers contract to finish
# buyer/seller => "finish"
# contract checks with datafeed:
# - amount received, send escrowed ETH to seller
# - amount not received, after expiry; sends escrowed ETH back to buyer
# - amount not received, but not expiry yet; nothing happens

shared:
    BUYER = 0x10
    SELLER = 0x11
    DATAFEED = 0x12

    BTC_ADDRESS = 0x20
    BTC_AMOUNT = 0x21
    EXPIRY = 0x22

    STATE = 0x30

    S_NEW = 1
    S_PENDING = 2
    S_FINISHED = 3
    S_EXPIRED = 4

init:
    contract.storage[BUYER] = msg.sender
    contract.storage[STATE] = S_NEW

code:
    cmd = msg.data[0]
    state = contract.storage[STATE]

    if state == S_NEW and cmd == "new" and msg.sender == contract.storage[BUYER]:
        if msg.data[1] == 0 or msg.data[2] == 0 or msg.data[3] == 0 or msg.data[4] == 0 or msg.data[5] == 0 or msg.value == 0:
            # invalid arguments
            return(0)

        # requests datafeed to watch btc_address
        args = array(2)
        args[0] = "watch"
        args[1] = msg.data[3]

        values = msg(tx.gas - 25, contract.storage[msg.data[2]], 0, args, 2)
        if values > 0:
            # initialize contract
            contract.storage[SELLER] = msg.data[1]
            contract.storage[DATAFEED] = msg.data[2]

            contract.storage[BTC_ADDRESS] = msg.data[3]
            contract.storage[BTC_AMOUNT] = msg.data[4]
            contract.storage[EXPIRY] = msg.data[5]

            contract.storage[STATE] = S_PENDING
            return(S_PENDING)

    elif state == S_PENDING and cmd == "finish" and msg.sender == contract.storage[BUYER] or msg.sender == contract.storage[SELLER]:
        if contract.storage[EXPIRY] < block.timestamp:
            # expired, refund buyer
            send(contract.storage[BUYER], contract.balance)
            contract.storage[STATE] = S_EXPIRED
            return(S_EXPIRED)

        else:
            # check with datafeed
            args = array(2)
            args[0] = "getreceivedbyaddress"
            args[1] = msg.data[contract.storage[BTC_ADDRESS]]

            values = call(contract.storage[DATAFEED], args, 2, 2)
            if values[0] >= contract.storage[BTC_AMOUNT]:
                # completed, pay seller
                send(contract.storage[SELLER], balance)
                contract.storage[STATE] = S_FINISHED
                return(S_FINISHED)
            else:
                # still pending
                return(S_PENDING)

    return(0)

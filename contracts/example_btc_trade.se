# ETH/BTC escrowed trade contract using CryptoCoinWatch datafeed
#
# buyer - person buying the BTC, selling ETH
# seller - person selling the BTC, buying ETH
# datafeed - address of cryptocoinwatch datafeed contract
#
# protocol:
# 1) buyer initialized trade contract
# buyer => "new", seller, datafeed, btc_address, btc_amount, expiry
# contract escrows eth_amount (callvalue)
# contract requests datafeed to watch btc_address
# 2) seller sends btc to btc_address
# 3) watchdog will notice total bitcoins received and updates value
# 4) buyer/seller triggers contract to finish
# buyer/seller => "finish"
# after expiry; sends escrowed ETH back to buyer
# contract checks with datafeed:
# - amount received, send escrowed ETH to seller
# - amount not received; nothing happens

data buyer
data seller
data datafeed

data btc_address
data btc_amount
data expiry

data state

extern cryptocoinwatch = [getinfo, echo, suicide, watch, getaddress, getreceivedbyaddress, setreceivedbyaddress]

def init():
    self.buyer = msg.sender
    self.state = 1  # S_NEW

# funid=0
def new(seller, datafeed, btc_address, btc_amount, expiry):
    if self.state == 1 and msg.sender == self.buyer:
        if seller == 0 or datafeed == 0 or btc_address == 0 or btc_amount == 0 or expiry == 0:
            # invalid arguments
            return(0)

        # requests datafeed to watch btc_address
        values = datafeed.watch(btc_address, as=cryptocoinwatch)
        if values > 0:
            # initialize contract
            self.seller = seller
            self.datafeed = datafeed

            self.btc_address = btc_address
            self.btc_amount = btc_amount
            self.expiry = expiry

            self.state = 2  # S_PENDING
            return(2)  # S_PENDING
    return(0)

# funid=1
def finish():
    if self.state == 2 and msg.sender == self.buyer or msg.sender == self.seller:
        if self.expiry < block.timestamp:
            # expired, refund buyer
            send(self.buyer, self.balance)
            self.state = 4  # S_EXPIRED
            return(4)  # S_EXPIRED

        else:
            # check with datafeed
            values = self.datafeed.getreceivedbyaddress(self.btc_address, as=cryptocoinwatch, outsz=2)
            if values[0] >= self.btc_amount:
                # completed, pay seller
                send(self.seller, self.balance)
                self.state = 3  # S_FINISHED
                return(3)  # S_FINISHED
            else:
                # still pending
                return(2)  # S_PENDING
    return(0)
